using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Extensions;

using Nitra.Declarations;
using Nitra.ProjectSystem;

using System;
using System.Console;
using System.Collections.Generic;
using System.Linq;
using Microsoft.Cci;
using Microsoft.Cci.MutableCodeModel;

namespace MiniC.Compiler
{
  class DotNetBackend: IAstVisitor, IDisposable
  {
    _file: File;
    _nameTable: NameTable = NameTable();
    _host: PeReader.DefaultHost = PeReader.DefaultHost(_nameTable);
    _rootUnitNamespace: RootUnitNamespace;
    _assembly: Assembly;
    _mainClass: NamespaceTypeDefinition;
    _coreAssembly: IAssembly;
    
    public static GenerateAssembly(file: File, outputPath: string): void
    {
      using (backend = DotNetBackend(file))
      {
        file.Ast.Accept(backend);
        backend.GenerateAssembly(outputPath);
      }
    }
    
    public this(file: File)
    {
      _file = file;
      _coreAssembly = _host.LoadAssembly(_host.CoreAssemblySymbolicIdentity);

      _assembly = Assembly() <- 
      {
        Name = _nameTable.GetNameFor("hello");
        ModuleName = _nameTable.GetNameFor("hello.exe");
        PlatformType = _host.PlatformType;
        Kind = ModuleKind.ConsoleApplication;
        RequiresStartupStub = _host.PointerSize == 4;
        TargetRuntimeVersion = _coreAssembly.TargetRuntimeVersion
      };
        
      _assembly.AssemblyReferences.Add(_coreAssembly);
      _rootUnitNamespace = RootUnitNamespace() <- { Unit = _assembly };
      _assembly.UnitNamespaceRoot = _rootUnitNamespace;
     
      def moduleClass = NamespaceTypeDefinition() <-
      {
        ContainingUnitNamespace = _rootUnitNamespace;
        InternFactory = _host.InternFactory;
        IsClass = true;
        Name = _nameTable.GetNameFor("<Module>")
      };
      _assembly.AllTypes.Add(moduleClass);

      _mainClass = NamespaceTypeDefinition() <-
      {
        ContainingUnitNamespace = _rootUnitNamespace;
        InternFactory = _host.InternFactory;
        IsClass = true;
        IsPublic = true;
        IsStatic = true;
        Fields = List();
        Methods = List();
        Name = _nameTable.GetNameFor("Main");
        BaseClasses = List([_host.PlatformType.SystemObject]);  
      };
      _rootUnitNamespace.Members.Add(_mainClass);
      _assembly.AllTypes.Add(_mainClass);
    }
     
    GenerateAssembly(outputPath: string): void
    {
      def outputPath = 
        if (string.IsNullOrWhiteSpace(outputPath)) 
          IO.Path.GetDirectoryName(_file.FullName) 
        else 
          outputPath;
            
      def outputFileName = IO.Path.Combine(outputPath, IO.Path.ChangeExtension(IO.Path.GetFileNameWithoutExtension(_file.FullName), ".exe"));
        
      using (peStream = IO.File.Create(outputFileName))
        PeWriter.WritePeToStream(_assembly, _host, peStream);
    }
    
    //def ilGenerator = ILGenerator(_host, mainMethod);

    //  def systemConsole = UnitHelper.FindType(_nameTable, coreAssembly, "System.Console");
    //  def writeLine = TypeHelper.GetMethod(systemConsole, _nameTable.GetNameFor("WriteLine"), _host.PlatformType.SystemString);

    //  ilGenerator.Emit(OperationCode.Ldstr, "hello");
    //  ilGenerator.Emit(OperationCode.Call, writeLine);
    //  ilGenerator.Emit(OperationCode.Ret);

    //  def body = ILGeneratorMethodBody(ilGenerator, true, 1, mainMethod, [], []);

    public Visit(r: IRef): void
    {
      _ = r;
    }
    
    public Visit(name: Name): void implements IAstVisitor.Visit
    {
      _ = name;
    }
    
    public Visit(reference: Reference): void implements IAstVisitor.Visit
    {
      _ = reference;
    }
    
    public Visit(ast: IAst): void
    {
      WriteLine(ast);
      
      match (ast) {
      | decls is TopDeclaration.AstList => decls.Accept(this);
      | var is VarDeclaration =>
        def field = FieldDefinition() <- {
          ContainingTypeDefinition = _mainClass;
          Name = _nameTable.GetNameFor(var.Name.Text);
          Type = GetType(var.Symbol.Type);
          IsStatic = true;
          Visibility = TypeMemberVisibility.Public;
          IsReadOnly = false;
        };
        _mainClass.Fields.Add(field);
      
      | fn is FunDeclaration =>
        def method = Method(fn.Name.Text, fn.Symbol.ReturnType);
        method.Body = GenerateCompoundStatement(method, fn.Body);
      | _ => WriteLine($"Unhandled! $ast");
      }
    }
    
    public Method(name: string, returnType: TypeSymbol): MethodDefinition
    {
      def name = if (name == "main") "Main" else name;
      def method = MethodDefinition() <-
      {
        ContainingTypeDefinition = _mainClass;
        InternFactory = _host.InternFactory;
        IsCil = true;
        IsStatic = true;
        Name = _nameTable.GetNameFor(name);
        Type = GetType(returnType);
        Parameters = List();
        Visibility = TypeMemberVisibility.Public
      };
      
      when (name == "Main") _assembly.EntryPoint = method;
      _mainClass.Methods.Add(method);
      method
    }
    
    GetType(typeSymbol: TypeSymbol): ITypeReference
    {
      match (typeSymbol){
      | _ is IntSymbol => _host.PlatformType.SystemInt32;
      | _ is FloatSymbol => _host.PlatformType.SystemFloat64;
      | _ is BoolSymbol => _host.PlatformType.SystemBoolean;
      | _ is VoidSymbol => _host.PlatformType.SystemVoid;
      | _ => assert(false)
      }
    }
    
    GenerateCompoundStatement(method: MethodDefinition, compoundStatement: CompoundStatement): ILGeneratorMethodBody
    {
      def ilGenerator = ILGenerator(_host, method);
      def nameTable = NameTable();
      
      def localVars = compoundStatement.LocalVariables.Map(var =>
          LocalDefinition() <-
          {
            MethodDefinition = method;
            Name = nameTable.GetNameFor(var.Name.Text);
            Type = GetType(var.Symbol.Type);
          });
      
      localVars.Iter(ilGenerator.AddVariableToCurrentScope);
      
      foreach (statement in compoundStatement.Statements)
        GenerateStatement(ilGenerator, statement);
      
      ILGeneratorMethodBody(ilGenerator, true, 10, method, localVars, []);
    }
    
    GenerateStatement(ilGenerator: ILGenerator, statement: Statement): void 
    {
      match (statement) {
      | expr is Statement.Expression => GenerateExpression(ilGenerator, expr.Body);
      | Statement.ReturnVoid => ilGenerator.Emit(OperationCode.Ret);
      | _ => WriteLine($"Unhandlend statement! $statement");
      }
    }
    
    GenerateExpression(ilGenerator: ILGenerator, expr: Expr): void
    {
      match (expr) {
      | assignment is Expr.ScalarAssignment => ()
        //ilGenerator.Emit(OperationCode.Ldloc, );
      | _ => WriteLine($"Unhandled expression! $expr");
      }
    }
    
    public Dispose(): void 
    { 
      _host.Dispose()
    }
  }
}