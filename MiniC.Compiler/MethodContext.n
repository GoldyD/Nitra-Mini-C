using Microsoft.Cci;
using Microsoft.Cci.MutableCodeModel;
using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Extensions;
using Nitra.Declarations;
using Nitra.ProjectSystem;
using System;
using System.Console;
using System.Collections.Generic;
using System.IO;
using System.Linq;

namespace MiniC.Compiler
{
  [Record]
  class Return
  {
    public Label: ILGeneratorLabel;
    public Var: LocalDefinition;
  }
  
  class MethodContext
  {
    _backend     : DotNetBackend;
    _nameTable   : NameTable;
    [Accessor] 
    _method      : MethodDefinition;
    _isVoid      : bool;
    [Accessor] 
    _ilGenerator : ILGenerator;
    _parameterMap      : Hashtable[VarDeclarationSymbol, IParameterDefinition] = Hashtable();
    _localVars         : List[LocalDefinition] = List();
    _localVarMap       : Hashtable[VarDeclarationSymbol, ILocalDefinition] = Hashtable();
    _argMap            : Hashtable[VarDeclarationSymbol, ILocalDefinition] = Hashtable();
    _whileExitLabelMap : Hashtable[Statement.While, ILGeneratorLabel] = Hashtable();
    [Accessor]
    _return            : option[Return]; 
    
    public LocalVars : Seq[LocalDefinition] { get { _localVars } }
    
    public this(backend: DotNetBackend, nameTable: NameTable, method: MethodDefinition, isVoid: bool, ilGenerator: ILGenerator)
    {
      _backend = backend;
      _nameTable = nameTable;
      _method = method;
      _isVoid = isVoid;
      _ilGenerator = ilGenerator;
      _return = if (_isVoid) None() else Some(Return(ILGeneratorLabel(), CreateLocalVar("_return_", Method.Type)));
    }
    
    public GetCciLocalVar(varDeclSymbol : VarDeclarationSymbol) : ILocalDefinition
    {
      _localVarMap[varDeclSymbol]
    }
    
    CreateLocalVar(name: string, ty: ITypeReference): LocalDefinition 
    {
      def cciLocalVar = LocalDefinition() <-
      {
        MethodDefinition = Method;
        Name = _nameTable.GetNameFor(name);
        Type = ty
      };
      
      IlGenerator.AddVariableToCurrentScope(cciLocalVar);
      _localVars.Add(cciLocalVar);
      cciLocalVar
    }
    
    public AddLocalVar(varDeclSymbol : VarDeclarationSymbol) : void
    {
      def cciLocalVar = CreateLocalVar(varDeclSymbol.Name, _backend.GetVariableType(varDeclSymbol));
      _localVarMap[varDeclSymbol] = cciLocalVar;
    }
    
    public AddParameter(paramSymbol : VarDeclarationSymbol) : void
    {
      def cciParameter = ParameterDefinition();
      cciParameter.Name = _nameTable.GetNameFor(paramSymbol.Name);
      cciParameter.Type = _backend.GetVariableType(paramSymbol);
      Method.Parameters.Add(cciParameter);
      _parameterMap[paramSymbol] = cciParameter;
    }
    
    public GetCciParameter(paramSymbol : VarDeclarationSymbol) : IParameterDefinition
    {
      _parameterMap[paramSymbol]
    }
    
    public GetOrNewWhileExitLabel(w: Statement.While): ILGeneratorLabel
    {
      _whileExitLabelMap
        .Get(w)
        .Fill(() =>
        {
            def label = ILGeneratorLabel();
            _whileExitLabelMap[w] = label;
            label
        })
    }
    
    public TryFindWhileExitLabel(w: Statement.While): option[ILGeneratorLabel]
    {
      _whileExitLabelMap.Get(w);
    }
    
    public EmitReturn(): void
    {
      Return.Iter(ret =>
      {
        IlGenerator.MarkLabel(ret.Label);
        IlGenerator.Emit(Op.Ldloc, ret.Var);
        IlGenerator.Emit(Op.Ret);
      });
    }
  }  
}