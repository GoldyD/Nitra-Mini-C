using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Utility.Getopt;

using System;
using System.Console;
using System.IO;

namespace MiniC.TestRunner
{
  class CommandPromptReader
  {
    public SourceDir        : string { get; private set; }
    public SearchPattern    : string { get; private set; }
    public StopOnFirstError : bool { get; private set; }
    public Verbose          : bool { get; private set; }
    public Success          : bool { get; }

    public this()
    {
      def options = [
        CliOption.String(name = "-dir",
                    aliases = [],
                    help = "Directory containing test files",
                    handler = x => { SourceDir = x }),
        CliOption.String(name = "-pattern",
                    aliases = ["-p"],
                    help = "Files search pattern",
                    handler = x => { SearchPattern = if (string.IsNullOrWhiteSpace(x)) "*.c" else x }),
        CliOption.Boolean(name = "-stop_on_first_error",
                    aliases = ["-sfe"],
                    help = "Stop on first failed test",
                    handler = x => { StopOnFirstError = x }),
        CliOption.Boolean(name = "-verbose",
                    aliases = ["-v"],
                    help = "Verbose output",
                    handler = x => { Verbose = x })
        ];
      
      Getopt.Parse(options);

      def usage() : void
      {
        def help = Getopt.Usage(options);
        WriteLine("Usage: MiniC.TestRunner -dir [directory containing test files]");
        WriteLine("flags:");
        WriteLine(help);
      }

      when (string.IsNullOrEmpty(SourceDir))
      {
        WriteLine("'dir' option is required");
        usage();
        return;
      }

      Success = true;
    }
  }
}