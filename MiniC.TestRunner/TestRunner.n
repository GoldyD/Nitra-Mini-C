using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Extensions;

using System;
using System.Console;
using System.Diagnostics;
using System.IO;
using System.Collections.Generic;
using System.Linq;

namespace MiniC.TestRunner
{
  module TestRunner
  {
    public RunAll(config: Config): list[TestResult]
    {
      def runTest(test, outputDir)
      {
        def result =
          TestStageResult.Time(TestStage.Compile, () => Compiler.Compile(test.SourceFile, outputDir, config.CompilerPath))
            .Bind(assembly => TestStageResult.Time(TestStage.Verify, () => PeVerify.VerifyAssembly(assembly)))
            .Bind(assembly => TestStageResult.Time(TestStage.RunAssembly, () => OutputChecker.CheckAssemblyOutput(assembly, test.ExpectedOutput)));
          
        TestResult(result.Result, result.Writer)
      }
      
      def printErrors(errors: list[Error], indent: int)
      {
        foreach (e in errors)
          PrintError($"$(e.Format(indent))")
      }
      
      def tempDir = Directory.CreateDirectory(Path.Combine(Path.GetTempPath(), Guid.NewGuid().ToString()));
      WriteLine();
      
      TestReader
        .ReadTests(config.SourceDir, "*.c")
        .AsParallel()
        .WithExecutionMode(ParallelExecutionMode.ForceParallelism)
        .Select(case => 
        {
          match (case)
          {
            | Result.Fail(es) =>
                WriteLine();
                printErrors(es, 0);
                TestResult(case.Map(_ => FakeVoid()), [])
            | Result.Ok(case) =>
                def result = runTest(case, tempDir.FullName);
                def fileName = Path.GetFileNameWithoutExtension(case.SourceFile);
                lock(typeof(TestRunner))
                {
                  match (result.Result)
                  {
                    | Result.Ok(_) => 
                        PrintOk($"$fileName - OK");
                        when (config.Verbose)
                          foreach (stage in result.Stages)
                            Print($"  $(stage.Stage) - $(stage.Duration.TotalMilliseconds) ms");
                         
                    | Result.Fail(es) => 
                        PrintError($"$fileName - ERROR");
                        if (config.Verbose)
                          foreach (stage in result.Stages)
                          {
                            Print($"  $(stage.Stage) - $(stage.Duration.TotalMilliseconds) ms");
                            when (stage.Result is Result.Fail(es)) printErrors(es, 2)
                          }
                        else printErrors(es, 1)
                  }
                }
                TestResult(result.Result, result.Stages)
          }
        })
        .TakeWhile(r => !config.StopOnFirstError || r.Result.IsOk)
        .ToList()
        .ToNList()
    }
    
    PrintColored(message: string, color: ConsoleColor): void
    {
      lock (typeof(TestRunner))
      {
        Console.ForegroundColor = color;
        try
          WriteLine(message)
        finally
          Console.ResetColor()
      }
    }
    
    PrintError(message: string): void { PrintColored(message, ConsoleColor.Red) }
    PrintOk(message: string): void { PrintColored(message, ConsoleColor.Green) }
    Print(message: string): void { PrintColored(message, ConsoleColor.White) }
  
    public PrintTotalResults(results: list[TestResult], verbose: bool): void
    {
      def stagesByType = 
          results.Map(r => r.Stages)
            .Concat()
            .GroupBy(x => x.Stage)
            .Select(x => (x.Key, x.ToList().ToNList()))
            .OrderBy(x => x[0])
            .ToArray()
            .ToNList();
        
        def stats = 
          stagesByType.Map((stage, stages) =>
          {
            def duration = TimeSpan.FromMilliseconds(stages.Map(x => x.Duration.TotalMilliseconds :> int).Sum() :> double);
            def count = stages.Length;
            def errorCount = stages.Filter(x => !x.Result.IsOk).Length;
            (stage, count, errorCount, duration)
          });

        def totalDuration = TimeSpan.FromMilliseconds(stats.Map((_, _, _, x) => x.TotalMilliseconds).Sum());
        def totalCount = results.Length;
        def totalError = results.Filter(r => !r.Result.IsOk).Length;
        
        when (verbose)
        {
          WriteLine();
        
          foreach ((stage, count, errorCount, duration) in stats)
            WriteLine($"$stage: count = $count, errors = $errorCount, duration = $duration");
        }
        
        Print("");
        def message = $"\nTotal: run = $totalCount, failed = $totalError, duration = $totalDuration\n";
        if (totalError == 0) 
        {
          PrintOk("OK");
          PrintOk(message);
        }
        else 
        {
          PrintError("ERROR");
          PrintError(message);
        }
    }
  }
  
  [Record]
  class TestCase
  {
    public SourceFile: FilePath;
    public ExpectedOutput: Output;
  }
  
  [Record]
  public variant Error
  {
    | ProcessRunError { Message: string }
    | ReadTestError { Message: string }
    | CompilerError { Messages: list[string] }
    | VerifyError { Message: list[string] }
    | OutputError { Expected: Output; Actual: Output }
    
    public Format(indent: int): string
    {
      def prefix = string.Join("", Enumerable.Repeat("  ", indent).ToArray());
      def (name, lines) =
        match(this)
        {
          | ProcessRunError(msg) => ("ProcessRunError", [msg])
          | ReadTestError(msg) => ("ReadTestError", [msg])
          | CompilerError(msgs) => ("CompilerError", msgs)
          | VerifyError(msgs) => ("PeVerifyError", msgs)
          | OutputError(exp, act) => 
            {
              ("WrongOutput",
               ["Expected:"]
                .Append(exp.Lines.Map(x => prefix + x))
                .Append(["Actual:"])
                .Append(act.Lines.Map(x => prefix + x)))
            }
        }
      def lines = string.Join("\n", lines.Map(x => prefix + prefix + x));
      $"$prefix[$name]\n$lines"
    }
  }
  
  module TestReader
  {
    public ReadTests(dir: DirPath, pattern: string): Seq[Result[TestCase, Error]]
    {
      if (!Directory.Exists(dir)) [Result.Fail([Error.ReadTestError($"Directory $dir does not exists.")])]
      else
        Directory
          .EnumerateFiles(dir, pattern)
          .Select(file => ParseOutputComment(File.ReadAllLines(file)).Map(x => TestCase(file, x)))
    }
    
    ParseOutputComment(lines: array[string]): Result[Output, Error]
    {
      def error(msg) { Result.Fail([Error.ReadTestError(msg)]) }
      
      def loop (inside, output, lines)
      {
        match (inside, lines)
        {
          | (false, "BEGIN-OUTPUT" :: rest) => loop (true, output, rest)
          | (true, "BEGIN-OUTPUT" :: _) => error("Duplicated BEGIN-OUTPUT")
          | (true, "END-OUTPUT" :: _) => Result.Ok(output)
          | (false, "END-OUTPUT" :: _) => error("END-OUTPUT without previous BEGIN-OUTPUT")
          | (true, line :: rest) => loop (true, line :: output, rest)
          | (true, []) => error("Missing END-OUTPUT marker")
          | (false, []) => error("No BEGIN-OUTPUT marker was found")
          | (_, _ :: rest) => loop (inside, output, rest)
        }
      }
      loop(false, [], lines.ToNList()).Map(x => Output(x.Reverse().Filter(x => !string.IsNullOrWhiteSpace(x))))
    }
  }
  
  public enum TestStage
  {
    | Compile
    | Verify
    | RunAssembly
  }
  
  [Record]
  public class TestStageResult
  {
    public Stage: TestStage;
    public Duration: TimeSpan;
    public Result: Result[FakeVoid, Error];
    
    public static Time[T](stage: TestStage, f: void -> Result[T, Error]): ResultWriter[T, Error, TestStageResult]
    {
      def sw = Stopwatch.StartNew();
      def result = f();
      sw.Stop();
      ResultWriter(result, [TestStageResult(stage, sw.Elapsed, result.Map(_ => FakeVoid()))])
    }
  }

  [Record]
  public class TestResult
  {
    public Result: Result[FakeVoid, Error];
    public Stages: list[TestStageResult];
  }
  
  module Compiler
  {
    type AssemblyPath = FilePath;
    
    public Compile(sourcePath: FilePath, outputDir: DirPath, compilerPath: FilePath): Result[AssemblyPath, Error]
    {
      def assemblyPath = Path.Combine(outputDir, Path.GetFileNameWithoutExtension(sourcePath)) + ".exe";
      def (output, result) = ProcessRunner.Run(compilerPath, TimeSpan.FromSeconds(10), $"-f $sourcePath -out $assemblyPath");
      def outputResult = 
        match (output)
        {
          | Output([]) => Result.Ok(FakeVoid())
          | _ => Result.Fail([Error.CompilerError(output.Lines)])
        }
      outputResult.Bind(_ => result).Map(_ => assemblyPath)
    }
  }
  
  module OutputChecker
  {
    public CheckAssemblyOutput(assemblyPath: FilePath, expectedOutput: Output): Result[FakeVoid, Error]
    {
      def (output, result) = ProcessRunner.Run(assemblyPath, TimeSpan.FromSeconds(10));
      def outputResult =  
        if (output != expectedOutput) 
          Result.Fail([Error.OutputError(expectedOutput, output)])
        else 
          Result.Ok(FakeVoid());
      outputResult.Bind(_ => result)
    }
  }
}