using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle;

using System;
using System.Collections.Generic;
using System.Console;
using System.Linq;
using System.IO;

namespace MiniC.TestRunner 
{
  module Program
  {
    Main() : void
    {
      def config = CommandPromptReader();
      when (config.Success)
      {
        def tempDir = Directory.CreateDirectory(Path.Combine(Path.GetTempPath(), Guid.NewGuid().ToString()));
        def _results =
          TestReader
            .ReadTests(config.SourceDir, "*.c")
            .Select(case => 
            {
              match (case)
              {
                | Result.Fail(e) => 
                    WriteLine(e);
                    case.Map(_ => FakeVoid())
                | Result.Ok(case) =>
                    def result = TestRunner.Run(case, tempDir.FullName);
                    def fileName = Path.GetFileNameWithoutExtension(case.SourceFile);
                    match (result.Result)
                    {
                      | Result.Ok(_) => 
                          WriteLine($"$fileName - OK");
                          when (config.Verbose)
                            foreach (stage in result.Stages)
                              WriteLine($"  $(stage.Stage) - $(stage.Duration.TotalMilliseconds) ms");
                           
                      | Result.Fail(es) => 
                          WriteLine($"$fileName - ERROR");
                          if (config.Verbose)
                            foreach (stage in result.Stages)
                            {
                              WriteLine($"  $(stage.Stage) - $(stage.Duration.TotalMilliseconds) ms");
                              when (stage.Result is Result.Fail(es))
                                foreach (e in es) 
                                  WriteLine($"$(e.Format(2))")
                            }
                          else
                            foreach (e in es)
                              WriteLine($"$(e.Format(1))")
                    }
                    result.Result
              }
            })
            .TakeWhile(x => !config.StopOnFirstError || x.IsOk)
            .ToList()
            .ToNList()
      }
    }
  }
}