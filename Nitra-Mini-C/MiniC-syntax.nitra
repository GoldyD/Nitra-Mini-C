syntax module MiniCSyntax
{
  using Nitra.Core;
  using Nitra.CStyleComments;

  keyword regex ['a'..'z', '_'..'_']+ rule S;
  regex KeywordToken = "if" | "else" | "while" | "return" | "break" | "void" | "int" | "true" | "false" | "bool" | "float";

  [Keyword] token Keyword = Name=KeywordToken !IdentifierPartCharacters;
  [Reference] token Reference = !Keyword IdentifierBody;
  [Name] token Name = !Keyword IdentifierBody;

  regex DecimalDigit = ['0'..'9'];
  
  [StartRule]
  syntax CompilationUnit = (Statement nl)*;

  syntax Statement
  {
	| Variable = Variable
	| Expression = Expression
  }

  syntax Variable = Type Name ";";

  syntax Type
  {
    | Void = "void" sm;
	| Int = "int" sm;
	| Float = "float" sm;
	| Bool = "bool" sm;
  }

  syntax Expression
  {
    | [SpanClass(Number)] IntegerLiteral = Digits
      {
        regex Digits = DecimalDigit+;
      }
	| [SpanClass(Number)] FloatLiteral = Digits
      {
        regex Digits = DecimalDigit+ "." DecimalDigit+;
      }
	| [SpanClass(Type)] BooleanLiteral = TrueFalse
	  {
		regex TrueFalse = "true" | "false";
	  }
    | Parenthesized = "(" Expression ")";
    | Variable = Reference;

	precedence Assignment:
    | Assignment = Reference sm "=" sm Expression ";" right-associative;
  }
}