syntax module MiniCSyntax
{
  using Nitra.Core;
  using Nitra.CStyleComments;

  keyword regex ['a'..'z', '_'..'_']+ rule S;
  regex KeywordToken = "if" | "else" | "while" | "return" | "break" | "void" | "int" | "true" | "false" |
					   "bool" | "float";

  [Keyword] token Keyword = Name=KeywordToken !IdentifierPartCharacters;
  [Reference] token Reference = !Keyword IdentifierBody;
  [Name] token Name = !Keyword IdentifierBody;

  regex IntegerLiteral = "\d+";
  regex FloatLiteral = "\d+\.\d+";
  regex BooleanLiteral = "true" | "false";

  [StartRule, ExplicitSpaces]
  syntax Program = (Declaration nl)*;

  syntax VariableDeclaration = TypeSpec Name ";";

  syntax Declaration
  {  
	| VariableDeclaration = VariableDeclaration;
	| FunctionDeclaration = TypeSpec sm Name "(" VariableDeclaration* ")" Body;
  }

  syntax TypeSpec 
  {
    | Void = "void" sm;
	| Int = "int" sm;
	| Float = "float" sm;
	| Bool = "bool" sm;
  }

  syntax Body
  {
    | Block = nl "{" inl Expression* d "}" ";"? nl;
    | Empty = ";" nl;
  }

  syntax Expression
  {
    | [SpanClass(Number)] Num = Digits
      {
        regex Digits = ['0'..'9']+;
      }

    | Braces = "(" Expression ")";
    | Variable = Reference;

  precedence Sum:
    | Sum = Expression sm Operator="+" sm Expression;
    | Sub = Expression sm Operator="-" sm Expression;

  precedence Mul:
    | Mul = Expression sm Operator="*" sm Expression;
    | Div = Expression sm Operator="/" sm Expression;

  precedence Unary:
    | Plus  = Operator="+" Expression
    | Minus = Operator="-" Expression
  }
}
