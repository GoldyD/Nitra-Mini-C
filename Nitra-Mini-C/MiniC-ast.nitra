using Nitra;
using Nitra.Declarations;
using System.Linq;
using System.Collections.Generic;

namespace MiniC
{
  ast CompilationUnit
  {
    in ContainingTable: TableScope;
    TopDeclarations.ContainingTable = ContainingTable;
    TopDeclarations: TopDeclaration*;
  }

  abstract declaration TopDeclaration
  {
  }
  
  abstract declaration VarDeclaration: TopDeclaration 
  {
    symbol
    {
      in Type: TypeSymbol;

      SpanClass = MiniC.VariableSpanClass;
      Kind = "variable";
    }

    Symbol.Type = TypeRef.Type;

    TypeRef : TypeReference;

    | ScalarDeclaration {}
    | ArrayDeclaration {}
  }
  
  declaration FunDeclaration: TopDeclaration 
  {
    symbol 
    {
      in ReturnType : TypeSymbol;
      in Parameters : IList[VarDeclarationSymbol];
	  out ParameterScope : TableScope = TableScope("parameters", this);
	  in BodyScope : Scope;
      SpanClass = MiniC.FunctionSpanClass;
      Kind = "function";
    }

    Symbol.ReturnType          = ReturnTypeRef.Type;
    Parameters.ContainingTable = Symbol.ParameterScope;
	Symbol.BodyScope           = ContainingTable.HideWith(Symbol.ParameterScope);
    Symbol.Parameters          = Parameters.Symbol.ToList();

    ReturnTypeRef : TypeReference;
    Parameters    : VarDeclaration*;
  }

  abstract ast TypeReference 
  {
    in Type: TypeSymbol;

    | Void  { Type = context.GetVoidSymbol(); }
    | Int   { Type = context.GetIntSymbol(); }
    | Float { Type = context.GetFloatSymbol(); }
    | Bool  { Type = context.GetBoolSymbol(); }
  }

  declaration Root : Container {}

  declaration Void  : Type {}
  declaration Int   : Type {}
  declaration Float : Type {}
  declaration Bool  : Type {}
}