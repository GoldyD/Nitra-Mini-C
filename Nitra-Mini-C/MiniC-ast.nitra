using Nitra;
using Nitra.Declarations;
using System.Linq;
using System.Collections.Generic;

namespace MiniC
{
  ast CompilationUnit
  {
    in ContainingTable: TableScope;
    TopDeclarations.ContainingTable = ContainingTable;
    TopDeclarations: TopDeclaration*;
  }

  abstract declaration TopDeclaration {}

  abstract ast VarHeader
  {
    | Global
    | Parameter
    | Local
  }

  abstract declaration VarDeclaration: TopDeclaration 
  {
    symbol
    {
      in Type: TypeSymbol;
      in VarKind: VariableKind;

      SpanClass = MiniC.VariableSpanClass;
      Kind = "variable";
    }

    Symbol.Type = TypeRef.Type;
    Symbol.VarKind = VariableKind.FromHeader(Header);

    TypeRef : TypeReference;
    Header  : VarHeader;

    | ScalarDeclaration {}
    | ArrayDeclaration {}
  }
  
  abstract ast LocalVariableContainer
  {
    in DeclaredIn : FunDeclarationSymbol;
    in Loop       : option[Statement.While] = None();
  }

  declaration FunDeclaration: TopDeclaration 
  {
    symbol 
    {
      in ReturnType      : TypeSymbol;
      in Parameters      : IList[VarDeclarationSymbol];
      in FunScope        : Scope;
      out ParameterScope : TableScope = TableScope("parameters", this);
      SpanClass = MiniC.FunctionSpanClass;
      Kind      = "function";
    }

    Symbol.ReturnType          = ReturnTypeRef.Type;
    Parameters.ContainingTable = Symbol.ParameterScope;
    Symbol.FunScope            = ContainingTable.HideWith(Symbol.ParameterScope);
    Symbol.Parameters          = Parameters.Symbol.ToList();
    Body.DeclaredIn            = Symbol;
    Body.OuterScope            = Symbol.FunScope;

    when (Name.Text == "main" && !MiniCTypeUnifier.Instance.TryUnify(Symbol.ReturnType, context.GetVoidSymbol())
                                 && !MiniCTypeUnifier.Instance.TryUnify(Symbol.ReturnType, context.GetIntSymbol()))
      ReturnTypeRef.Error($"Return type of main function must be void or int, but it's $(Symbol.ReturnType)");

    ReturnTypeRef : TypeReference;
    Parameters    : VarDeclaration*;
    Body          : CompoundStatement;
  }

  ast CompoundStatement: BindableAst, LocalVariableContainer
  {
    in OuterScope : Scope;
    out LocalVariableScope: TableScope = TableScope("local variables", DeclaredIn);

    LocalVariables.ContainingTable = LocalVariableScope;
    Scope = OuterScope.HideWith(LocalVariableScope);
    Statements.Scope = Scope;
    Statements.DeclaredIn = DeclaredIn;
    Statements.Loop = Loop;

    LocalVariables : VarDeclaration*;
    Statements     : Statement*;
  }

  abstract ast Statement: BindableAst, LocalVariableContainer
  {
    | Empty {}
    | Expression 
      { 
        Body.Scope = Scope;
        Body: Expr;
      }
    | Compound 
      { 
        Nested.OuterScope = Scope;
        Nested.DeclaredIn = DeclaredIn;
        Nested.Loop = Loop;

        Nested : CompoundStatement; 
      }
    | If 
      {
        Condition.Scope = Scope;
        Condition.Used = true;
        TrueBranch.Scope  = Scope;
        FalseBranch.Scope = Scope;
        TrueBranch.DeclaredIn = DeclaredIn;
        FalseBranch.DeclaredIn = DeclaredIn;
        TrueBranch.Loop = Loop;
        FalseBranch.Loop = Loop;

        Condition: Expr;
        TrueBranch  : Statement;
        FalseBranch : Statement;
      }
    | While 
      {
        Condition.Scope = Scope;
        Condition.Used = true;
        Body.Scope = Scope;
        Body.DeclaredIn = DeclaredIn;
        Body.Loop = Some(this);

        Condition: Expr;
        Body: Statement;
      }
    | ReturnVoid {}
    | Return 
      { 
        Value.Scope = Scope;
        Value.Used = true;

        unless (MiniCTypeUnifier.Instance.TryUnify(Value.Type, DeclaredIn.ReturnType))
          Value.Error($"Expected $(DeclaredIn.ReturnType) but found $(Value.Type)");

        Value: Expr; 
      }
    | Break 
      {
        when (Loop.IsNone)
          Error("Break out of while.");
      }
  }

  abstract ast Unary : Expr 
  { 
    Expr1.Scope = Scope;
    Expr1.Used = true;
    Type = Expr1.Type;

    unless (MiniCTypeUnifier.Instance.TryUnify(Expr1.Type, context.GetIntSymbol()) ||
            MiniCTypeUnifier.Instance.TryUnify(Expr1.Type, context.GetFloatSymbol()))
      Expr1.Error($"Expected int or float, but found $(self.Expr1.Type)");

    Expr1 : Expr; 
  }
  
  abstract ast Binary : Expr
  { 
    Expr1.Scope = Scope;
    Expr2.Scope = Scope;
    Expr1.Used = true;
    Expr2.Used = true;

    Expr1 : Expr;
    Expr2 : Expr; 
  }

  abstract ast SameTypesExpr : Binary
  {
    unless (MiniCTypeUnifier.Instance.TryUnify(Expr1.Type, Expr2.Type))
        Expr2.Error($"$(self.Expr2.Type) is not compatible with $(self.Expr1.Type).");
  }

  abstract ast OrAndExpr : SameTypesExpr
  {
    Type = context.GetBoolSymbol();
    
    unless (MiniCTypeUnifier.Instance.TryUnify(Expr1.Type, context.GetBoolSymbol()))
        Expr1.Error($"Expected boolean expression but found $(self.Expr1.Type).");
  }

  abstract ast EqualExpr : SameTypesExpr
  {
    Type = context.GetBoolSymbol();
  }

  abstract ast ArithmeticBinary : SameTypesExpr
  {
    unless (MiniCTypeUnifier.Instance.TryUnify(Expr1.Type, context.GetIntSymbol()) ||
            MiniCTypeUnifier.Instance.TryUnify(Expr1.Type, context.GetFloatSymbol()))
      Expr1.Error($"Expected int or float, but found $(self.Expr1.Type)");

    Type = Expr1.Type;
  }

  abstract ast Expr : BindableAst
  {
    in Type: TypeSymbol = context.GetVoidSymbol();
    in ExpectedType: TypeSymbol = MiniCTypeUnifier.Instance.CreateTypeVar();
    in Used: bool = false;

    unless (MiniCTypeUnifier.Instance.TryUnify(Type, ExpectedType))
        Error($"Expected $(self.ExpectedType) but got $(self.Type)");

    | IntegerLiteral 
      { 
        Type = context.GetIntSymbol();
        Value : int; 
      }
    | FloatLiteral   
      { 
        Type = context.GetFloatSymbol();
        Value : double; 
      }
    | FalseLiteral 
      { 
        Type = context.GetBoolSymbol(); 
      }
    | TrueLiteral 
      { 
        Type = context.GetBoolSymbol(); 
      }
    | VariableRef 
      {
        out Ref: Ref[VarDeclaration.ScalarDeclarationSymbol] = Reference.Ref.Resolve();
        Reference.Scope = Scope;
        Type = Ref.Symbol.Type;
        
        Reference: Reference;
      }
    | ArrayRef 
      {
        out Ref: Ref[VarDeclaration.ArrayDeclarationSymbol] = Reference.Ref.Resolve();
        Reference.Scope = Scope;
        Index.Scope = Scope;
        Index.ExpectedType = context.GetIntSymbol();
        Type = Ref.Symbol.Type;
        
        Reference: Reference;
        Index: Expr;
      }
    | FunCall 
      {
        out Ref: Ref[FunDeclarationSymbol] = Reference.Ref.Resolve();

        Reference.Scope = Scope;
        Arguments.Scope = Scope;

        when (Arguments.Count != Ref.Symbol.Parameters.Count)
          Reference.Error($"Wrong number of arguments: expected $(Ref.Symbol.Parameters.Count), but given $(Arguments.Count)");
        
        Arguments.IndexIn = 0;
        Arguments.Func = Ref.Symbol;
        Arguments.Used = true;
        Type = Ref.Symbol.ReturnType;

        Arguments: Expr.Argument*;
        Reference: Reference;
      }

    | Argument
      {
        inout Index : int;
        in Func : FunDeclarationSymbol;

        Expr.Scope = Scope;
        Expr.Used = true;

        IndexOut = IndexIn + 1;
        ExpectedType = AstUtils.GetParameterType(Func, IndexIn);
        Type = Expr.Type;

        Expr : Expr;
      }

    | ArraySize 
      {
        out Ref: Ref[VarDeclaration.ArrayDeclarationSymbol] = Reference.Ref.Resolve();
        Reference.Scope = Scope;
        Type = context.GetIntSymbol();

        Reference: Reference;
      }

    | ArrayAllocation 
      {
        Type = TypeRef.Type;
        Size.Scope = Scope;
        Size.ExpectedType = context.GetIntSymbol();
        Size.Used = true;

        TypeRef: TypeReference;
        Size: Expr;
      }
    | ScalarAssignment
      {
        out Ref: Ref[VarDeclarationSymbol] = Reference.Ref.Resolve();
        Reference.Scope = Scope;
        Value.Scope = Scope;
        Value.ExpectedType = Ref.Symbol.Type;
        Value.Used = true;

        Reference: Reference;
        Value: Expr;
      }
    | ArrayAssignment
      {
        out Ref: Ref[VarDeclaration.ArrayDeclarationSymbol] = Reference.Ref.Resolve();
        Reference.Scope = Scope;
        Index.Scope = Scope;
        Index.ExpectedType = context.GetIntSymbol();
        Index.Used = true;
        Value.Scope = Scope;
        Value.ExpectedType = Ref.Symbol.Type;
        Value.Used = true;
        
        Reference: Reference;
        Index: Expr;
        Value: Expr;
      }

    | Or : OrAndExpr {}
    | And : OrAndExpr {}
    | Equal : EqualExpr {}
    | NotEqual : EqualExpr {}
    | LessEqual    : ArithmeticBinary {}
    | Less         : ArithmeticBinary {}
    | GreaterEqual : ArithmeticBinary {}
    | Greater      : ArithmeticBinary {}
    | Sum          : ArithmeticBinary {}
    | Sub          : ArithmeticBinary {}
    | Modulus      : ArithmeticBinary {}
    | Multiply     : ArithmeticBinary {}
    | Divide       : ArithmeticBinary {}

    | Plus          : Unary {}
    | Minus         : Unary {}
    | Negate        : Unary {}
    | LogicalNegate : Unary {}
  }

  abstract ast TypeReference 
  {
    in Type: TypeSymbol;

    | Void  { Type = context.GetVoidSymbol(); }
    | Int   { Type = context.GetIntSymbol(); }
    | Float { Type = context.GetFloatSymbol(); }
    | Bool  { Type = context.GetBoolSymbol(); }
  }

  declaration Root : Container {}

  declaration Void  : Type {}
  declaration Int   : Type {}
  declaration Float : Type {}
  declaration Bool  : Type {}
}