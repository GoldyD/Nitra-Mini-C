using Nitra;
using Nitra.Declarations;
using System.Collections.Generic;
using MiniC;

namespace MiniCAst
{
  ast CompilationUnit
  {
    in ContainingTable: TableScope;
    TopDeclarations.ContainingTable = ContainingTable;
    TopDeclarations: TopDeclaration*;
  }

  abstract ast TopDeclaration: ScopedAst
  {
  }
  
  abstract ast VarDeclaration: TopDeclaration 
  {
    TypeRef : TypeReference;
  }

  declaration ScalarDeclaration: VarDeclaration {}

  declaration ArrayDeclaration: VarDeclaration {}
  
  declaration FunDeclaration: TopDeclaration 
  {
    //in Parameters: IList[Parameter];
  }
  
  abstract ast TypeReference 
  {
    in TypeRef: TypeSymbol;

    | Void  { TypeRef = context.GetVoidSymbol(); }
    | Int   { TypeRef = context.GetIntSymbol(); }
    | Float { TypeRef = context.GetFloatSymbol(); }
    | Bool  { TypeRef = context.GetBoolSymbol(); }
  }

  declaration Root : Container {}

  declaration Void: Type {}
  declaration Int: Type {}
  declaration Float: Type {}
  declaration Bool: Type {}
}