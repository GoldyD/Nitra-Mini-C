using Nitra;
using Nitra.Runtime;
using Nitra.Declarations;

namespace MiniC 
{
  map syntax MiniCSyntax.CompilationUnit -> CompilationUnit
  {
    TopDeclarations -> TopDeclarations;
  }
  
  map syntax MiniCSyntax.TopDeclaration -> TopDeclaration
  {
    | VarDeclaration -> VarDeclaration(VarHeader { true -> IsGlobal })
    | FunDeclaration -> FunDeclaration 
      {
        Name                  -> Name;
        TypeRef               -> ReturnTypeRef;
        VarDeclarations.Item1 -> Parameters;
        CompoundStatement     -> Body;
      }
  }
  
  map syntax MiniCSyntax.CompoundStatement -> CompoundStatement
  {
    VarDeclarations -> LocalVariables(VarHeader { false -> IsGlobal });
    Statements -> Statements;
  }

  map syntax MiniCSyntax.Statement -> Statement
  {
    | Expression -> Expression
      {
        Expr -> Body;
      }
    | Empty -> Empty { }
    | Compound -> Compound 
      {
        CompoundStatement -> Nested;
      }
    | If -> If 
      {
        Expr -> Condition; 
        Statement -> TrueBranch;
        Statement -> FalseBranch; 
      }
    | While -> While
      {
        Expr -> Condition;
        Statement -> Body;
      }
    | ReturnVoid -> ReturnVoid {}
    | Return -> Return { Expr -> Value; }
    | Break -> Break {}
  }

  map syntax MiniCSyntax.Argument -> Expr.Argument
  {
    Expr -> Expr;
  }

  map syntax MiniCSyntax.Expr -> Expr
  {
    | IntegerLiteral -> IntegerLiteral { Value = ParsedValue(Digits, int.Parse(GetText(Digits))); }
    | FloatLiteral   -> FloatLiteral   { Value = ParsedValue(Digits, double.Parse(GetText(Digits))); }
    | True           -> TrueLiteral    { }
    | False          -> FalseLiteral   { }
    | VariableRef    -> VariableRef    { Reference -> Reference; }
    | ArrayRef -> ArrayRef
      {
        Reference -> Reference;
        Expr -> Index;
      }
    | FunCall -> FunCall
      {
        Reference -> Reference;
        Arguments.Item1 -> Arguments;
      }
    | ArraySize -> ArraySize { Reference -> Reference; }
    | Braces -> this.Expr
    | ArrayAllocation -> ArrayAllocation
      {
        TypeRef -> TypeRef;
        Expr -> Size;
      }
    | ScalarAssignment -> ScalarAssignment
      {
        Reference -> Reference;
        Expr -> Value;
      }
    | ArrayAssignment -> ArrayAssignment
      {
        Reference -> Reference;
        Index -> Index;
        Expr  -> Value;
      }

    | Or           { Expr1 -> Expr1; Expr2 -> Expr2; }
    | And          { Expr1 -> Expr1; Expr2 -> Expr2; }
    | Equal        { Expr1 -> Expr1; Expr2 -> Expr2; }
    | NotEqual     { Expr1 -> Expr1; Expr2 -> Expr2; }
    | LessEqual    { Expr1 -> Expr1; Expr2 -> Expr2; }
    | Less         { Expr1 -> Expr1; Expr2 -> Expr2; }
    | GreaterEqual { Expr1 -> Expr1; Expr2 -> Expr2; }
    | Greater      { Expr1 -> Expr1; Expr2 -> Expr2; }
    | Sum          { Expr1 -> Expr1; Expr2 -> Expr2; }
    | Sub          { Expr1 -> Expr1; Expr2 -> Expr2; }
    | Modulus      { Expr1 -> Expr1; Expr2 -> Expr2; }
    | Multiply     { Expr1 -> Expr1; Expr2 -> Expr2; }
    | Divide       { Expr1 -> Expr1; Expr2 -> Expr2; }

    | Plus          { Expr -> Expr1; }
    | Minus         { Expr -> Expr1; }
    | Negate        { Expr -> Expr1; }
    | LogicalNegate { Expr -> Expr1; }
  }
  
  map syntax MiniCSyntax.VarDeclaration(header: VarHeader) -> VarDeclaration
  {
    | Scalar -> ScalarDeclaration
      {
        Name    -> Name;
        TypeRef -> TypeRef;
        header  -> Header;
      }
  
    | Array -> ArrayDeclaration
      {
        Name    -> Name;
        TypeRef -> TypeRef;
        header  -> Header;
      }
  }
  
  map syntax MiniCSyntax.TypeRef -> TypeReference
  {
    | Void  -> Void  {}
    | Int   -> Int   {}
    | Float -> Float {}
    | Bool  -> Bool  {}
  }
}