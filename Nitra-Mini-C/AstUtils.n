using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using System;
using System.Collections.Generic;
using System.Linq;
using Nitra;
using Nitra.Declarations;

namespace MiniC
{
  module AstUtils
  {
    public GetVoidSymbol(this ctx: DependentPropertyEvalContext): VoidSymbol { GetContext(ctx).Void }
    public GetIntSymbol(this ctx: DependentPropertyEvalContext): IntSymbol { GetContext(ctx).Int }
    public GetFloatSymbol(this ctx: DependentPropertyEvalContext): FloatSymbol { GetContext(ctx).Float }
    public GetBoolSymbol(this ctx: DependentPropertyEvalContext): BoolSymbol { GetContext(ctx).Bool }
    
    GetContext(ctx: DependentPropertyEvalContext): MiniCDependentPropertyEvalContext {
      ctx :> MiniCDependentPropertyEvalContext
    }
    
    // Hack: Nitra dependent property not support (yet) of indexer access.
    public GetParameterType(func : FunDeclarationSymbol, index : int) : TypeSymbol
    {
      def parameters = func.Parameters;
      if (index < parameters.Count && parameters[index].IsTypeEvaluated)
        parameters[index].Type
      else 
        MiniCTypeUnifier.Instance.CreateTypeVar() // Use TypeVar to prevent phantom type mismatch error messages.
    }
  }
}
