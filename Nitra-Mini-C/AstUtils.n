using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using System;
using System.Linq;
using Nitra;
using Nitra.Declarations;

namespace MiniC
{
  module AstUtils
  {
    public GetVoidSymbol(this ctx: DependentPropertyEvalContext): VoidSymbol { GetContext(ctx).Void }
    public GetIntSymbol(this ctx: DependentPropertyEvalContext): IntSymbol { GetContext(ctx).Int }
    public GetFloatSymbol(this ctx: DependentPropertyEvalContext): FloatSymbol { GetContext(ctx).Float }
    public GetBoolSymbol(this ctx: DependentPropertyEvalContext): BoolSymbol { GetContext(ctx).Bool }
    
    GetContext(ctx: DependentPropertyEvalContext): MiniCDependentPropertyEvalContext {
      ctx :> MiniCDependentPropertyEvalContext
    }
    
    public AssignExpectedTypesToArguments(parameters: Seq[VarDeclarationSymbol], arguments: IAstList[Expr]): void 
    {
      when (arguments.Count() != parameters.Count())
        arguments.Error($"Wrong number of arguments: expected $(parameters.Count()), but given $(arguments.Count())");
        
        parameters.ZipToArray(arguments).Iter((param, arg) => arg.ExpectedType = param.Type);
    }
  }
}
